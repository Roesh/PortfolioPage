@model PortfolioPage.Pages.ProjectTracker.DI_BasePageModel

@if(Model.displaySingleComponent){
    await RenderComponentCard(Model.currentComponent, Model.minCardWidth, Model.maxCardWidth);
    return; 
}

@if(Model.parentComponent != null && Model.parentComponentCardDisplayed == false){
    await RenderComponentCard(Model.parentComponent, Model.minCardWidth, Model.maxCardWidth);
    Model.parentComponentCardDisplayed = true;
    return; 
}
@foreach (projectComponent item in Model.componentList){
    await RenderComponentCard(item, Model.minCardWidth, Model.maxCardWidth);
}

@{
    async Task RenderComponentCard(projectComponent item, string cardMinWidth, string cardMaxWidth){
        Model.currentComponent = item;
        
        <!-- master project card row -->
        @* TODO: Implement some way to filter the project components list, perhaps using some personal preferences 
        May want to default sort by components that are behind or sort by completion date*@
        <div class="col-sm card border border-dark mx-2 my-3 text-dark" style="min-width: @cardMinWidth; max-width: @cardMaxWidth">
           <!-- Optional header -->            
            @if(Model.addedHeader != null && Model.addedHeader.Count > 0){
                <div class="row justify-content-center text-center border-bottom btn-dark text-white">
                    @foreach (var subitem in Model.addedHeader)
                    {
                        <div class="col h4">
                            @subitem
                        </div>
                    }
                </div>
            }
            <!-- Rows 1-4, High level details and actions -->
            <div class="row">
                <div class="col">

                    <!-- Row 1 - Title-->
                    <div class="row">
                        <div class="col h3 mt-1 mb-1">
                            @Html.DisplayFor(modelItem => item.title)
                        </div>
                    </div>                

                    <!-- Row 3 - Deadline information -->
                    <div class="row">
                        <div class="col mb-1 text-muted">   
                            @if(item.completionDate != null){
                                <i>This project was completed on @Html.DisplayFor(model => item.completionDate)</i>
                            }
                            else
                            {
                                var daysLeft = (item.completionDeadline - DateTime.Now).Days;
                                <i>Due on:&nbsp;
                                @Html.DisplayFor(model => item.completionDeadline)
                                <text>&nbsp;(</text>@daysLeft
                                <text>&nbsp;days)</text></i>                                                                            
                            }
                        </div>              
                    </div>            
                    
                    <!-- Row 4 - Type and Status information-->
                    <div class="row">
                        <div class="col-auto mr-auto border-left-0 border-top border-right border-secondary shadow rounded-right">
                            <div class="row no-gutters">
                                <!-- Phase information -->
                                <div class="col-auto text-secondary">
                                    @Html.DisplayNameFor(model =>
                                    model.componentList[0].componentType):&nbsp;
                                </div>
                                <div class="col-auto text-dark">
                                    @Html.DisplayFor(modelItem => item.componentType)
                                </div>
                            </div>                                
                            <div class="row mb-1 no-gutters">
                                <!-- Status information -->
                                <div class="col-auto text-secondary">                                        
                                        @Html.DisplayNameFor(model =>
                                        model.componentList[0].componentStatus):&nbsp;
                                </div>
                                @if(item.componentStatus == projectComponent.componentStatusEnum.OnTrack)
                                {
                                <div class="col-auto text-success align-self-center px-1">                                        
                                    <i><b>@Html.DisplayFor(modelItem => item.componentStatus)</b></i>
                                </div>
                                }
                                else if(item.componentStatus == projectComponent.componentStatusEnum.Behind)
                                {
                                <div class="col-auto text-warning align-self-center px-1" style="background-color: black">
                                    <i><b>@Html.DisplayFor(modelItem => item.componentStatus)</b></i>
                                </div>
                                }
                                else if(item.componentStatus == projectComponent.componentStatusEnum.Complete)
                                {
                                <div class="col-auto text-info align-self-center px-1">
                                    <i><b>@Html.DisplayFor(modelItem => item.componentStatus)</b></i>
                                </div>
                                }
                                else{
                                    <div class="col-auto align-self-center px-1">
                                        <i><b>@Html.DisplayFor(modelItem => item.componentStatus)</b></i>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                </div>
                <!-- High level actions -->
                <div class="row justify-content-end">
                    <div class="col align-contents-center mr-1">                    
                        <partial name="_ProjectComponentActionsPartial" />   
                    </div>
                </div>  
            </div>

            <!-- Row 5 Component Summary -->
            <div class="@Model.row5_ComponentSummary">
                <div class="col">
                    <div>
                        @{
                            int totalComponents = 0;
                            int numComponentsBehind = 0;
                            int numComponentsOnHold = 0;
                            int numComponentsComplete = 0;
                            int numNotComplete = 0;
                            int numComponentsOnTrack = 0;
                            if(item.childComponents != null){
                                var query = (from c in item.childComponents select c);
                                // TODO: Should these be cached somehow?
                                totalComponents = query.Count();
                                numComponentsBehind = query.Where(m => m.componentStatus == projectComponent.componentStatusEnum.Behind).Count();
                                numComponentsOnHold = query.Where(m => m.componentStatus == projectComponent.componentStatusEnum.OnHold).Count();
                                numComponentsComplete = query.Where(m => m.componentStatus == projectComponent.componentStatusEnum.Complete).Count();
                                numComponentsOnTrack = query.Where(m => m.componentStatus == projectComponent.componentStatusEnum.Complete).Count();
                                numNotComplete = totalComponents - numComponentsComplete;                               
                            }
                            // TODO: Check if exposing project ID is a security flaw. Unlikely, but confirm
                            string ComponentCreationString = "/ProjectTracker/Component/Create?parentProjectID=" 
                                + @item.projectID.ToString() + "&parentComponentID=" + item.ID.ToString();
                            
                            //Display data // TODO: Component summary on hover*@
                            // TODO: Link to component summary
                            if(totalComponents > 0){
                                <a type="button" class="btn btn-primary"
                                    asp-page="/ProjectTracker/Component/Details"
                                    asp-route-id="@item.ID">
                                    <span class="badge badge-light">@totalComponents</span> Components
                                    <span class="sr-only">total components</span>
                                </a>   
                            }
                            @if(numComponentsOnHold > 0){
                                <a type="button" class="btn btn-secondary"
                                    asp-page="/ProjectTracker/Component/Details"
                                    asp-route-id="@item.ID"
                                    asp-route-filter="onHold">
                                    On hold <span class="badge badge-light">@numComponentsOnHold</span>
                                    <span class="sr-only">components on hold</span>
                                </a>
                            }
                            @if(numComponentsOnTrack > 0){
                                <a type="button" class="btn btn-success">
                                    On hold <span class="badge badge-light">@numComponentsOnTrack</span>
                                    <span class="sr-only">components on hold</span>
                                </a>
                            }
                            @if(numComponentsBehind > 0){
                                <a type="button" class="btn btn-warning">
                                    Behind <span class="badge badge-light">@numComponentsBehind</span>
                                    <span class="sr-only">unread messages</span>
                                </a>
                            }
                            @if(numComponentsComplete > 0){
                                <a type="button" class="btn btn-info">
                                    Complete <span class="badge badge-light">@numComponentsComplete</span>
                                    <span class="sr-only">unread messages</span>
                                </a>
                            }
                            <a class="btn btn-info shadow-sm px-2 py-1 ml-2 my-2" href="@(ComponentCreationString)">
                                Add Component
                            </a>          
                        }
                    </div>               
                </div>
            </div>

            <!-- Row 6 Issues and updates Summary -->
            <div class="@Model.row6_IssueAndUpdateSummary">
                <div class="col align-self-center">
                    Issues link and summary
                    <a class="badge badge-pill badge-info px-2 py-2" href="#">Add issue</a>   
                </div>
                <div class="col">
                    
                    @if(item.projectUpdates != null && !(!item.projectUpdates?.Any() ?? false)){
                        <a type="button" class="btn btn-primary mb-1"
                            asp-page="/ProjectTracker/Update/Details"
                            asp-route-ComponentID="@item.ID">
                            Updates <span class="badge badge-light">@item.projectUpdates.Count()
                            </span>
                            <span class="sr-only">project's updates</span>
                        </a> 
                    }
                    <a class="badge badge-pill badge-info px-2 py-2" 
                    asp-page="/ProjectTracker/Update/Create"
                    asp-route-ComponentID="@item.ID">Add update</a>
                </div>
            </div> 

            <!-- Row 7 Description view-->
            <div class="row">
                <div class="col no-gutters text-center" id="descriptionCollapse">
                    @{
                        string description = item.componentDescription;
                        int descriptionLength = description.Length;
                        string dataTarget = "PRJ_CMP_ID_" + item.ID;
                        string dataTargetRef = "#" + dataTarget;

                        <span class="text-secondary">Description: </span>                        
                        if(descriptionLength > 50){
                            <text>@description.Remove(50) ...</text>
                            <button class="btn btn-muted no-gutters" type="button" data-toggle="collapse" data-target="@dataTargetRef" aria-expanded="false" aria-controls="collapseOne">
                            <i class="text-primary">(Expand)</i>
                            </button>
                        }else{
                            <span class="my-1">@description</span>
                        }

                        if(descriptionLength > 50){
                        <div id="@dataTarget" class="collapse" aria-labelledby="headingOne" data-parent="#descriptionCollapse">
                            <div class="card-body">
                                @description
                            </div>
                        </div>  
                        }
                    }
                </div>
            </div>
        </div>
    }
}
