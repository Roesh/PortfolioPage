@model PortfolioPage.Pages.ProjectTracker.DI_BasePageModel
@{
    Model.currentIssueResponseVM = new issueResponseViewModel();
}

@foreach (issue item in Model.issueList){
    await RenderProjectIssueCard(item, Model.minCardWidth, Model.maxCardWidth);
}

@{
    async Task RenderProjectIssueCard(issue item, string cardMinWidth, string cardMaxWidth){   

        Model.currentIssue = item;
        <!-- master project card row -->
        @* TODO: Implement some way to filter the projects list, perhaps using some personal preferences *@
        <div class="col-sm card border border-dark mx-2 my-3 text-dark" style="min-width: @cardMinWidth; max-width: @cardMaxWidth">
            <!-- Optional header -->            
            @if(Model.addedHeader != null && Model.addedHeader.Count > 0){
                <div class="row justify-content-center text-center border-bottom btn-dark text-white">
                    @foreach (var subitem in Model.addedHeader)
                    {
                        <div class="col h4">
                            @subitem
                        </div>
                    }
                </div>
            }
            
            <!-- Rows 1-4, High level details and actions -->
            <div class="row">
                <div class="col">

                    <!-- Row 1 - Title-->
                    <div class="row">
                        <div class="col h3 mt-1 mb-1">
                            <img src="~/resources/issueIcon.svg" style="width: 32px; height: 32px" alt="issue icon" />
                            @Html.DisplayFor(m => item.issueTitle)
                            @{
                                if(item.projectIssueStatus != issue.issueStatus.Closed){
                                    string pillString = string.Empty;
                                    if(item.projectIssuePriority == issue.issuePriority.Low)
                                    {
                                        pillString = "badge badge-pill badge-info badge-success px-2 py-2";
                                    }
                                    if(item.projectIssuePriority == issue.issuePriority.Medium)
                                    {
                                        pillString = "badge badge-pill badge-warning badge-warning px-2 py-2";
                                    }
                                    if(item.projectIssuePriority == issue.issuePriority.High)
                                    {
                                        pillString = "badge badge-pill badge-danger badge-info px-2 py-2";
                                    }                                
                                    <div class="@pillString">@Html.DisplayFor(m => item.projectIssuePriority)</div>
                                }
                            }
                        </div>   
                    </div>
                    
                    <!-- Row 4 - Type information-->
                    <div class="row">
                        <div class="col-auto mr-auto mt-2 px-2 border-secondary shadow rounded-right">
                            <div class="row no-gutters">
                                <div class="col-auto text-secondary">                                        
                                    @Html.DisplayNameFor(model =>
                                    model.issueList[0].projectIssueStatus):&nbsp;
                                                    
                                    @if(item.projectIssueStatus == issue.issueStatus.Open)
                                    {
                                    <span class="col-auto text-warning align-self-center px-1">                                        
                                        <i><b>@Html.DisplayFor(m => item.projectIssueStatus)</b></i>
                                    </span>
                                    }
                                    @if(item.projectIssueStatus == issue.issueStatus.inProgress)
                                    {
                                    <span class="col-auto text-primary align-self-center px-1" style="background-color: black">
                                        <i><b>@Html.DisplayFor(m => item.projectIssueStatus)</b></i>
                                    </span>
                                    }
                                    @if(item.projectIssueStatus == issue.issueStatus.Closed)
                                    {
                                    <span class="col-auto text-secondary align-self-center px-1">
                                        <i><b>@Html.DisplayFor(m => item.projectIssueStatus)</b></i>
                                    </span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                    <!-- High level actions -->
                    <div class="row justify-content-end">
                        <div class="col align-contents-center mr-1">                    
                            <partial name="_ProjectIssueActionsPartial" />   
                        </div>
                    </div>  
            </div>       

            <!-- Row 7 Description view-->
            <div class="row my-2 mx-1">
                <div class="col no-gutters" id="descriptionCollapse">
                    @{
                        @*{
                            var projectUpdate = new projectUpdate();
                            projectUpdate.
                        }*@
                        string description = item.issueText;
                        int descriptionLength = description.Length;
                        string dataTarget = "ISSUE_ID_" + item.ID;
                        string dataTargetRef = "#" + dataTarget;

                        if(descriptionLength > 250){
                            <text>@description.Remove(50) ...</text>
                            <button class="btn btn-muted no-gutters" type="button" data-toggle="collapse" data-target="@dataTargetRef" aria-expanded="false" aria-controls="collapseOne">
                            <i class="text-primary">(Expand)</i>
                            </button>
                        }else{
                            <text>@description</text>
                        }
                        if(descriptionLength > 250){
                            <div id="@dataTarget" class="collapse" aria-labelledby="headingOne" data-parent="#descriptionCollapse">
                                <div class="card-body">
                                    @description                                
                                </div>
                            </div>  
                        }
                    }
                </div>
            </div>

            @if(!(!item.issueResponses?.Any() ?? false)){
                var IssueCollapseID = "ISSUE_COLLAPSE_ID_" + @item.ID.ToString();
                
                <div class="row">
                    <div class="col">
                        <a class="text-primary" data-toggle="collapse" href="#@IssueCollapseID" role="button" aria-expanded="false" aria-controls="@IssueCollapseID">
                            View responses
                        </a>

                        <div class="collapse mt-1" id="@IssueCollapseID">
                            @{
                                foreach(var response in item.issueResponses){
                                    <div class="card card-body mb-1">
                                        @* TODO: Create response card potentially*@
                                        <div class="text-secondary">
                                            <i>@{  
                                                @Model.getUserNameFromUserID(response.creatingUserID);
                                                <text> on </text>
                                                @response.creationDate
                                                <text>:</text>
                                            }</i>
                                        </div>
                                        <div>
                                            @response.responseText
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="row">
                    <div class="col form-group">                        
                        <textarea asp-for="currentIssueResponseVM.responseText" class="form-control d-flex" rows="4"></textarea>
                        <span asp-validation-for="currentIssueResponseVM.responseText" class="text-danger"></span>
                    </div>
                </div>
                <div class="form-group">
                    <input type="submit" asp-route-IssueID="@item.ID" asp-page="/ProjectTracker/IssueResponse/Create" value="Add response" class="btn btn-primary" />
                </div>
            </form>
        </div>
    }
}